for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
orinum <- readline("Input a four-letter number:")
orinum <- readline("Input a four-letter number:")
orinum <- as.integer(readline[1])
orinum <- readline("Input a four-letter number:")
orinum <- orinum(guess, 1:1)
orinum <- substring(orinum, 1:1)
orinum <- as.integer(readline[1])
orinum <- readline("Input a four-letter number:")
orinum <- as.integer(readline[1])
ans <- as.character(c(sample(0:9,size=4)))
cor.num <- sample(x=c(0:9),size = 4)
error  <- 0
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- as.integer(readline[1])
}
ans <- orinum
for(i in guess){
for(j in guess){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,guess)
cp.table
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
}
ans <- orinum
for(i in orinum){
for(j in orinum){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
}
ans <- orinum
for(i in orinum){
for(j in orinum){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,guess)
cp.table
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
}
ans <- orinum
for(i in orinum){
for(j in orinum){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,orinum)
cp.table
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in orinum){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
print("YAY! YOU WON!!")
print(paste("The answer is ",ans))
cat("The answer is ",ans)
print(paste("You guessed",c.ter,"times."))
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
orinum <- substring(orinum, 1:9, 1:9)
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:9, 1:9)
orinum <- substring(orinum, 1:9, 1:9)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:9, 1:9)
}
while(orinum > 9876||orinum<=0||exam[1]!=""){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
while(orinum > 9876||orinum<=0||exam[1]!=""){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
}
ans <- orinum
for(i in orinum){
for(j in orinum){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,orinum)
cp.table
A <- 0
B <- 0
# ?蝞????????????
for (i in c(1:4)) {
if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
}
count<- 0
# ?蝞?????+B???????
for(i in cor.num){
for(j in orinum){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinumX <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
while(orinum > 9876||orinum<=0||exam[1]!=""){
exam[1] <- ""
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinumX <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
}
ans <- orinumX
for(i in orinumX){
for(j in orinumX){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,orinumX)
cp.table
A <- 0
B <- 0
for (i in c(1:4)) {
if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
}
count<- 0
for(i in cor.num){
for(j in orinumX){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinumX <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
while(orinum > 9876||orinum<=0||exam!=""){
exam[1] <- ""
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinumX <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
}
ans <- orinumX
for(i in orinumX){
for(j in orinumX){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
while(orinum > 9876||orinum<=0||exam!=""){
exam <- ""
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinumX <- substring(orinum, 1:4, 1:4)
exam <- substring(orinum,1:1,1:1)
}
orinum <- readline("Input a four-letter number:")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:9, 1:9)
orinumX <- substring(orinum, 1:4, 1:4)
while(orinumX > 9876||orinumX<=0||exam!=""){
exam <- ""
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinumX <- substring(orinum, 1:4, 1:4)
}
url <- "https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=asus&page=1&sort=rnk/dc"
#設定網址
my.data <- fromJSON(url)
library(jsonlite)
#設定網址
my.data <- fromJSON(url)
#Json結構的資料抓下來
my.data
asked <-frame(my.data$prods$id,my.data$prods$name,my.data$prods$price)
View(my.data)
my.data[["prods"]][["price"]]
asked <-frame(my.dmy.data[["prods"]][["id"]]ata$prods$id,my.data[["prods"]][["name"]],my.data[["prods"]][["price"]])
asked <-read_json(my.data$prods$id,my.data$prods$name,my.data$prods$price)
asked <-read_json(my.data$prods$id)
#設定網址
my.data <- read_json(url$prods)
#設定網址
my.data <- read_json(url.prods)
#設定網址
my.data <- read_json(url)
View(my.data)
#Json結構的資料抓下來
my.data
asked <-frame(my.data$prods$id,my.data$prods$name)
#Json結構的資料抓下來
my.data$prods
#Json結構的資料抓下來
my.data$prods$name
(jsonlite)
#Json結構的資料抓下來
my.data$prods.name
#Json結構的資料抓下來
my.data$prodsname
library(jsonlite)
#Json結構的資料抓下來
my.data$name
asked <-frame(my.data$prods$id,my.data$prods$name)
#Json結構的資料抓下來
my.data$prods
asked <-data.frame(my.data$prods$id,my.data$prods$name)
View(asked)
library(jsonlite)
url <- "https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=asus&page=1&sort=rnk/dc"
#設定網址
my.data <- read_json(url)
#Json結構的資料抓下來
my.data$prods
#Json結構的資料抓下來
my.data$prods
asked <-data.frame(my.data$prods$id,my.data$prods$name)
View(asked)
View(asked)
asked <-my.data$prods$id
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
````echo =FALSE`
library(jsonlite)
url <- "https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=asus&page=1&sort=rnk/dc"
#設定網址
my.data <- read_json(url)
#Json結構的資料抓下來
my.data$prods
asked <-my.data$prods$id
```
View(my.data)
add <- my.data$prods
View(add)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
### function GetLargest ###################################################
GetLargest <- function (vector) {
print(paste("The Largest Number is :", max(vector)))
}
vec_1 <- c(1, 5, 10, 200, 2000, 121)
GetLargest(vec_1)
### function SayHello #####################################################
SayHello <- function (name) {
print(paste("Hello,",name))
}
SayHello("Pecu") # Output > "Hello, Pecu"
### function GetBmi #######################################################
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg/(my.height.m)^2
# Return my.bmi
return ()
}
GetBmi(180, 55) # return 16.97531
### function GetBmi #######################################################
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg/(my.height.m)^2
# Return my.bmi
return (my.bmi)
}
GetBmi(180, 55) # return 16.97531
### function CheckBmiLevel ################################################
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg # "Your bmi:  22.5981404958678 , 正常範圍"
### function GetLargest ###################################################
GetLargest <- function (vector) {
print(paste("The Largest Number is :", max(vector)))
}
vec_1 <- c(1, 5, 10, 200, 2000, 121)
GetLargest(vec_1)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ___, header = _, stringsAsFactors = F)
knitr::opts_chunk$set(echo = TRUE)
```{r pressure, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
summary(cars)
plot(pressure)
setwd("C:/Users/perot/Desktop/NTU-CSX4001/Week_3/Course_3")
iris
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)    # 內建資料
knitr::opts_chunk$set(echo = TRUE)
install.packages(dslabs)
install.packages(dplyr)
install.packages(ggplot2)
install.packages(ggthemes)
install.packages(ggrepel)
library(dslabs)    # 內建資料

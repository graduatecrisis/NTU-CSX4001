rawp <-html_nodes(raw," .review_body")
rawp
rawp <-html_nodes(raw," .review_body")%>%html_text(raw)
rawp
raw <- read_html("https://www.metacritic.com/game/playstation-4/undertale/critic-reviews")
rawp <-html_nodes(raw," .review_body")%>%html_text(raw)
rawp
raw <- read_html("https://www.metacritic.com/game/playstation-4/undertale/user-reviews")
rawPSU <-html_nodes(raw," .review_body")%>%html_text(raw)
rawPSU
library(rvest)
raw <- read_html("https://www.metacritic.com/game/playstation-4/undertale/critic-reviews")
rawPSC <-html_nodes(raw," .review_body")%>%html_text(raw)
rawPSC
raw <- read_html("https://www.metacritic.com/game/playstation-4/undertale/user-reviews")
rawPSU <-html_nodes(raw," .review_body")%>%html_text(raw)
rawPSU
raw <- read_html("https://www.metacritic.com/game/switch/undertale/critic-reviews")
rawNSC <-html_nodes(raw," .review_body")%>%html_text(raw)
rawNSC
raw <- read_html("https://www.metacritic.com/game/switch/undertale/user-reviews")
rawNSU <-html_nodes(raw," .review_body")%>%html_text(raw)
rawNSU
library(rvest)
library(tidytext)
library(tm)
raw <- read_html("https://ani.gamer.com.tw/index.php")
rawN <-html_nodes(raw,".newanime-title , .newanime-count")%>%html_text(raw)
rawN
View(raw)
rawN <-data.drame(rawN)
rawN <-data.frame(rawN)
View(raw)
View(rawN)
View(rawN)
rawN <-html_nodes(raw,".newanime-title , .newanime-count")%>%html_text(raw)
rawN <-html_nodes(raw,".newanime-title")%>%html_text(raw)
raw <- read_html("https://ani.gamer.com.tw/index.php")
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
rawN <-html_nodes(raw,".newanime-title")%>%html_text(raw)
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
for(i in 1:length(rawT$X1)){
docs[[j]] <- gsub(keywords$X1[i],keywords$X2[i], docs[[j]])
}
for (j in seq(rawN){
rawT[[j]] <- gsub("remove_red_eye","", rawT[[j]])
for (j in seq(rawN){
for (j in seq(rawN){
for (j in seq(rawN){
for (j in seq(rawN)){
rawT[[j]] <- gsub("remove_red_eye","", rawT[[j]])
}
for (j in seq(rawN)){
rawT[[j]] <- gsub("remove_red_eye","", rawT[[j]])
rawT[[j]] <- gsub(",","", rawT[[j]])
}
name <-c("名稱","觀看次數")
list<-data.frame(rawN,rawT)
list
list<-data.frame(rawN,rawT,colnames(name))
list<-data.frame(rawN,rawT,col.name = name)
list<-
list
list<-data.frame(名稱= rawN,rawT,)
list<-data.frame(Name = rawN,Views= rawT)
list
View(list)
shiny::runApp('Week_6/hw_6/Project_1/text')
# Define UI for application that draws a histogram
ui <- shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
))
runApp('Week_6/hw_6/Project_1/asdf')
list
sort(view)
sort(list,~view)
sort(list,list$view)
order(list$view)
order(list$view[2:])
order(list$view[2,:])
order(list$view[2,])
order(list$view[2,:42])
order(list$view[2:42])
order(list$view[2:42,])
order(list$view)
order(list$Views)
list = order(list$Views)
list = order(list,list$Views)
list<-data.frame(Name = rawN,Views= rawT)
list = order(list,list$Views)
View(list)
list = list[order(list$Views),]
View(list)
rawN
rawN = rawN[1:21]
rawN
rawT = rawN[1:21]
rawT = rawT[1:21]
rawT
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
rawT = rawT[1:21]
rawT
for (j in seq(rawN)){
rawT[[j]] <- gsub("remove_red_eye","", rawT[[j]])
rawT[[j]] <- gsub(",","", rawT[[j]])
}
name <-c("名稱","觀看次數")
list<-data.frame(Name = rawN,Views= rawT)
list
list = list[order(list$Views),]
list
library(plotly)
list = list[order(list$Views),]
list
list<-data.frame(Name = rawN,Views= rawT)
list
list.pre
list.pre = list[order(list$Views),]
list.pre
list
list = data.frame(list, Line = number(1:21))
list = data.frame(list, Line = 1:21)
list
date = date()
date
name <-c("名稱","觀看次數")
today <- Sys.Date()
format(today, format="%B %d %Y")
format(today, format="%B %d")
today <- Sys.Date()
format(today, format="%B %d")
today = format(today, format="%B %d")
name <-c("名稱",today)
list<-data.frame(Name = rawN,today= rawT)
list
name <-c("名稱",today)
list<-data.frame(Name = rawN,today= rawT)
colnames(list)<- c("名稱",today)
list
today = format(today, format="%b %d")
today <- Sys.Date()
today = format(today, format="%b %d")
colnames(list)<- c("名稱",today)
list
list.pre = list[order(list$Views),]
list.pre = list[order(list$Views),]
list
list.pre = list[order(list$Views),]
today <- Sys.Date()
today = format(today, format="%b %d")
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[order(list$),]
colnames(list.pre)<- c("名稱",today)
list.pre = list[order(list$today),]
colnames(list.pre)<- c("名稱",today)
list.pre
View(list.pre)
plot_ly(list, x = ~名稱, y = ~today, type = "scatter", color = ~)
plot_ly(list, x = ~名稱, y = ~today, type = "scatter")
plot_ly(list.pre, x = ~名稱, y = ~today, type = "scatter")
list.pre = list[order(list$today),]
plot_ly(list.pre, x = ~名稱, y = ~today, type = "scatter")
plot_ly(list.pre, x = ~Name, y = ~today, type = "scatter")
list.pre = list[order(list$today),]
plot_ly(list.pre, x = ~Name, y = ~today, type = "scatter")
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[order(list$today),]
list.pre
list.pre = list[sort(list$today),]
plot_ly(list.pre, x = ~Name, y = ~today, type = "scatter")
list.pre
list.pre = list[order(list$today),]
list.pre
list$today=as.numeric(list$today)
list.pre = list[order(list$today),]
list.pre
list$today=as.integer(list$today)
list.pre = list[order(list$today),]
list.pre
list$today=as.character(list$today)
list.pre = list[order(list$today),]
list.pre
list<-data.frame(Name = rawN,today= rawT)
list
#list = data.frame(list,
list$today=as.integer(list$today)
list.pre = list[order(list$today),]
list.pre
list<-data.frame(Name = rawN,today= rawT)
list
#list = data.frame(list,
list$today=as.character(list$today)
list.pre = list[order(list$today),]
list.pre
rawT = as.integer(rawT[1:21])
rawT
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[order(list$today),]
list.pre
list.pre = list[order(list$today),decreasing = TRUE]
list.pre
list.pre = list[order(list$today,decreasing = FALSE)]
list.pre = list[order(list$today,decreasing = TRUE)]
list.pre = list[order(list$today,),decreasing = TRUE]
list.pre = list[order(list$today,)]
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[order(list$today,)]
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[order(list$today,)]
list.pre = list[order(list$today)]
list.pre
plot_ly(list.pre, x = ~Name, y = ~today, type = "scatter")
list.pre = list[order(list$today,)]
list.pre
View(list.pre)
plot_ly(list.pre, x = ~Name, y = ~today, type = "scatter")
plot_ly(list.pre, y = ~today,x = ~Name, type = "scatter")
list.pre
list.pre
plot_ly(list.pre, y = ~today,x = ~Name, type = "scatter")
raw <- read_html("https://ani.gamer.com.tw/index.php")
rawN <-html_nodes(raw,".newanime-title")%>%html_text(raw)
rawN = rawN[1:21]
rawN
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
rawT = as.integer(rawT[1:21])
rawT
for (j in seq(rawN)){
rawT[[j]] <- gsub("remove_red_eye","", rawT[[j]])
rawT[[j]] <- gsub(",","", rawT[[j]])
}
today <- Sys.Date()
today = format(today, format="%b %d")
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[order(list$today,)]
list.pre
plot_ly(list.pre, y = ~today,x = ~Name, type = "scatter")
colnames(list.pre)<- c("名稱",today)
raw <- read_html("https://ani.gamer.com.tw/index.php")
rawN <-html_nodes(raw,".newanime-title")%>%html_text(raw)
rawN = rawN[1:21]
rawN
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
rawT = as.integer(rawT[1:21])
rawN <-html_nodes(raw,".newanime-title")%>%html_text(raw)
rawN = rawN[1:21]
rawN
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
for (j in seq(rawN)){
rawT[[j]] <- gsub("remove_red_eye","", rawT[[j]])
rawT[[j]] <- gsub(",","", rawT[[j]])
}
rawT = as.integer(rawT[1:21])
rawT
today <- Sys.Date()
today = format(today, format="%b %d")
list<-data.frame(Name = rawN,today= rawT)
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[order(list$today,)]
list.pre
View(list)
list.pre = list[order(~today,)]
list.pre = list[order(~today)]
list.pre
list.pre = list[order(~today,)]
list.pre = list[order(list$today,)]
list.pre = list[order(list$today)]
list.pre = sort.list(list$today, partial = NULL, na.last = TRUE, decreasing = TRUE,
method = c("auto", "shell", "quick", "radix"))
list.pre
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = sort.list(list, partial = NULL, na.last = TRUE, decreasing = TRUE,
method = c("auto", "shell", "quick", "radix"))
list.pre = sort.list(list$today, partial = NULL, na.last = TRUE, decreasing = TRUE,
method = c("auto", "shell", "quick", "radix"))
list.pre
list.pre = sort.list(list$today, partial = NULL, na.last = TRUE, decreasing = TRUE,
method = c("auto", "shell", "quick", "radix"))
list.pre
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = sort.list(list$today, partial = NULL, na.last = TRUE, decreasing = TRUE,
method = c("auto", "shell", "quick", "radix"))
list.pre
list<-data.frame(Name = rawN,today= rawT)
rawT = as.integer(rawT[1:21])
rawT
today <- Sys.Date()
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[ order(-list[,2] ]
list.pre = list[ order(-list[,2]) ]
rawN = rawN[1:21]
rawT = as.integer(rawT[1:21])
rawT
today <- Sys.Date()
list<-data.frame(Name = rawN,today= rawT)
list
list.pre = list[ order(-list$today,) ]
list$today
list.pre = list[with(list, order(-today)), ]
list.pre
plot_ly(list.pre, y = ~today,x = ~Name, type = "scatter")
View(list.pre)
list.pre
plot_ly(list[with(list, order(-today)), ], y = ~today,x = ~Name, type = "scatter")
library(dplyr)
list.pre = arrange(list, desc(today))
list.pre
plot_ly(, y = ~today,x = ~Name, type = "scatter")
plot_ly(list.pre, y = ~today,x = ~Name, type = "scatter")
View(list.pre)
plot_ly(list.pre, y = ~today, type = "scatter")
plot_ly(list.pre, y = ~today, color = ~Name,label = ~Nametype = "scatter")
plot_ly(list.pre, y = ~today, color = ~Name,label = ~Name,type = "scatter")
plot_ly(list.pre, y = ~today,label = ~Name,type = "scatter")
plot_ly(list.pre, x = ~today,y = ~Name,type = "scatter")
plot_ly(list.pre, y = ~today,x = ~Name,type = "scatter")
colnames(list.pre)<- c("名稱",today)
list.pre
today <- Sys.Date()
colnames(list.pre)<- c("名稱",today)
list.pre
format.Date(today)
today = format.Date(today)
colnames(list.pre)<- c("名稱",today)
list.pre
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rsconnect::setAccountInfo(name='perilium', token='B4B46DB01C91FFF14469639DA621E961', secret='+vPFOvxSyTyBTCYtonfAmLIF8Fs9Kb7SGApXSfl8')
runApp('Week_6/hw_6/Project_1/ANIME')
runApp('Week_6/hw_6/Project_1/ANIME')
t <- reactive(
invalidateLater(1000000) , #1000毫秒之后重新执行
paste("当前时间是:", Sys.time())
)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rsconnect::setAccountInfo(name='perilium', token='B4B46DB01C91FFF14469639DA621E961', secret='+vPFOvxSyTyBTCYtonfAmLIF8Fs9Kb7SGApXSfl8')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
textOutput("currentTime")
)
# Define server logic required to draw a histogram
server <-function(input, output) {
t <- reactive(
invalidateLater(1000000) , #1000毫秒之后重新执行
paste("当前时间是:", Sys.time())
)
output$currentTime <- renderText(
t()
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Week_6/hw_6/Project_1/ANIME')
plot_ly(list.pre, y = ~today,x = ~Name,type = "scatter", mode = "lines")
library(rvest)
library(tidytext)
library(tm)
library(plotly)
library(dplyr)
raw <- read_html("https://ani.gamer.com.tw/index.php")
rawN <-html_nodes(raw,".newanime-title")%>%html_text(raw)
rawN = rawN[1:21]
rawN
rawT <-html_nodes(raw,".newanime-count")%>%html_text(raw)
for (j in seq(rawN)){
rawT[[j]] <- gsub("remove_red_eye","", rawT[[j]])
rawT[[j]] <- gsub(",","", rawT[[j]])
}
rawT = as.integer(rawT[1:21])
rawT
today <- Sys.Date()
today = format.Date(today)
list<-data.frame(Name = rawN,today= rawT)
list
#list = data.frame(list,
#list$today=as.character(list$today)
list.pre = arrange(list, desc(today))
list.pre
plot_ly(list.pre, y = ~today,x = ~Name,type = "scatter", mode = "lines")
colnames(list.pre)<- c("名稱",today)
list.pre
ggplot(list.pre, aes(Name, today)) + geom_line(aes(group = Name), alpha = 0.2)
list.pre = arrange(list, desc(today))
list.pre
ggplot(list.pre, aes(Name, today)) + geom_line(aes(group = Name), alpha = 0.2)
list<-data.frame(Name = rawN,today= rawT,tomorrow = rawT*2)
list
list.pre = arrange(list, desc(today))
list.pre
ggplot(list.pre, aes(Name, today)) + geom_line(aes(group = Name), alpha = 0.2)
ggplot(list.pre, aes()) + geom_line(aes(group = Name), alpha = 0.2)
ggplot(list.pre) + geom_line(aes(group = Name), alpha = 0.2)
ggplot(list.pre,aes(today,tomorrow)) + geom_line(aes(group = Name), alpha = 0.2)
ggplot(list.pre,aes(Name,today)) + geom_line(aes(group = Name), alpha = 0.2)
ggplot(list.pre,aes(Name,today)) + geom_line(aes(group = ), alpha = 0.2)
txhousing
list<-data.frame(Name = rawN,today= rawT,tomorrow = rawT*2)
list
list.pre = arrange(list, desc(today))
list.pre
plot_ly(list.pre, y = ~today,x = ~Name,type = "scatter")
#讀取csv檔
filedata <- reactive({
read.csv("c://Users/perot/Desktop/NTU-CSX4001/Week_6/hw_6/Project_1/ANIME/list.csv")
})
library(shiny)
read.csv("c://Users/perot/Desktop/NTU-CSX4001/Week_6/hw_6/Project_1/ANIME/list.csv")
read.csv("c://Users/perot/Desktop/NTU-CSX4001/Week_6/hw_6/Project_1/ANIME/list.csv",fileEncoding = "UTF-8")
#讀取csv檔
filedata <- reactive({
read.csv("c://Users/perot/Desktop/NTU-CSX4001/Week_6/hw_6/Project_1/ANIME/list.csv",fileEncoding = "UTF-8")
})
output$caption <- renderDataTable({
filedata()
})
library(shiny)
library(rvest)
library(tidytext)
library(tm)
library(plotly)
library(dplyr)
runApp('Week_6/hw_6/Project_1/ANIME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
View(list)
iris
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
shiny::runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
shiny::runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
shiny::runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/debug')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')
runApp('Week_6&7&8/Project_1/GAME')
shiny::runApp('Week_6&7&8/Project_1/GAME')

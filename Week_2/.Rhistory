guess <- readline("請輸入一四位數:")
abc <- duplicated(guess)
if(unique(good_result) %in% unique(duplicated(guess))) result1 <- TRUE
else result1 <- FALSE
guess <- substring(guess, 1:4, 1:4)
result <- unique(guess) %in% unique(dit)
result <- unique(bad_result) %in% unique(result)
}
count <- count+1
cor.num <- sample(x=c(0:9),size = 4)
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
print("Input a four-letter number:")
orinum <- readline("")
orinum <- as.integer(readline[1])
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
print("Input a four-letter number:")
orinum <- readline("")
orinum <- as.integer(readline[1])
}
ans <- orinum
A.guess <- orinum%/%1000
A.int <- as.integer(A.guess)
orinum <- orinum%%1000
B.guess <- orinum%/%100
B.int <- as.integer(B.guess)
orinum <- orinum%%100
C.guess <- orinum%/%10
C.int <- as.integer(C.guess)
orinum <- orinum%%10
D.guess <- orinum
D.int <- as.integer(D.guess)
guess <- c(A.int,B.int,C.int,D.int)
for(i in guess){
for(j in guess){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,guess)
cp.table
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
orinum <- readline("Input a four-letter number:")
orinum <- readline("Input a four-letter number:")
orinum <- as.integer(readline[1])
orinum <- readline("Input a four-letter number:")
orinum <- orinum(guess, 1:1)
orinum <- substring(orinum, 1:1)
orinum <- as.integer(readline[1])
orinum <- readline("Input a four-letter number:")
orinum <- as.integer(readline[1])
ans <- as.character(c(sample(0:9,size=4)))
cor.num <- sample(x=c(0:9),size = 4)
error  <- 0
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- as.integer(readline[1])
}
ans <- orinum
for(i in guess){
for(j in guess){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,guess)
cp.table
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
}
ans <- orinum
for(i in orinum){
for(j in orinum){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
}
ans <- orinum
for(i in orinum){
for(j in orinum){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,guess)
cp.table
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in guess){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
cor.num <- as.character(sample(x=c(0:9),size = 4))
error  <- 0
A <- 0
c.ter<- 0
while(A!=4){
error <- 0
while(error!=4){
error <- 0
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
while(orinum > 9876||orinum<=0){
print("Invalid Input.Please go back.")
orinum <- readline("Input a four-letter number:")
orinum <- substring(orinum, 1:4, 1:4)
}
ans <- orinum
for(i in orinum){
for(j in orinum){
if (i == j){
error<- error+1
}
}
}
if(error!=4)  print("Invalid Input.Please go back.")
}
cp.table <- data.frame (cor.num,orinum)
cp.table
A <- 0
B <- 0
for (i in c(1:4))    if(cp.table[i, 1] == cp.table[i, 2])  A <- A+1
count<- 0
for(i in cor.num){
for(j in orinum){
if (i == j)        count<- count+1
}
if (count != 0){
B <- B+1
count<- 0
}
}
B <- B-A
if(A!=4)  print(paste(A,"A",B,"B"))
c.ter<- c.ter+1
}
print("YAY! YOU WON!!")
print(paste("The answer is ",ans))
cat("The answer is ",ans)
print(paste("You guessed",c.ter,"times."))
### Crawler_Example with rvest    #####################################################################
# 參考：https://blog.gtwang.org/r/rvest-web-scraping-with-r/
rm(list = ls())
library(rvest)
# Set url
url <- "https://www.ptt.cc/bbs/NBA/index5720.html"
# Get response
res <- read_html(url)
### Crawler_Example with rvest    #####################################################################
# 參考：https://blog.gtwang.org/r/rvest-web-scraping-with-r/
rm(list = ls())
library(rvest)
# Set url
url <- "https://www.ptt.cc/bbs/NBA/index5720.html"
install.packages(rvest)
install.packages("rvest")
### Crawler_Example with rvest    #####################################################################
# 參考：https://blog.gtwang.org/r/rvest-web-scraping-with-r/
rm(list = ls())
library(rvest)
# Set url
url <- "https://www.ptt.cc/bbs/NBA/index5720.html"
# Get response
res <- read_html(url)
View(res)
# Parse the content and extract the titles
raw.titles <- res %>% html_nodes("div.title")
# Extract link
nba.article.link <- raw.titles %>% html_node("a") %>% html_attr('href')
# Extract article
nba.article.title <- raw.titles %>% html_text()
# Create dataframe
nba.df <- data.frame(nba.article.title, nba.article.link)
# Set df's colnames
nba.df.col.names <- c("title", "link")
colnames(nba.df) <- nba.df.col.names
### Crawler_Example with jsonlite #####################################################################\
rm(list = ls())
library(jsonlite)
url <- "https://www.dcard.tw/_api/posts?popular=true"
res <- fromJSON(url)
View(res)
View(res)
### Crawler_Example with rvest    #####################################################################
# 參考：https://blog.gtwang.org/r/rvest-web-scraping-with-r/
rm(list = ls())
library(rvest)
# Set url
url <- "https://www.ptt.cc/bbs/NBA/index5720.html"
# Get response
res <- read_html(url)
# Parse the content and extract the titles
raw.titles <- res %>% html_nodes("div.title")
View(raw.titles)
# Extract link
nba.article.link <- raw.titles %>% html_node("a") %>% html_attr('href')
# Extract article
nba.article.title <- raw.titles %>% html_text()
View(res)
# Create dataframe
nba.df <- data.frame(nba.article.title, nba.article.link)
View(nba.df)
# Set df's colnames
nba.df.col.names <- c("title", "link")
colnames(nba.df) <- nba.df.col.names
### Crawler_Example with jsonlite #####################################################################\
rm(list = ls())
library(jsonlite)
url <- "https://www.dcard.tw/_api/posts?popular=true"
res <- fromJSON(url)
View(res)
library(rvest)
library(stringr)
library(rlist)
url <-
'http://news.baidu.com/ns?cl=2&rn=20&tn=news&word=%E7%89%B9%E6%9C%97%E6%99%AE&ie=utf-8'
httr_web <- read_html(url,encoding =
'utf-8'
)
title <- httr_web%>%html_nodes(
'h3>a'
)%>%html_text(trim = T)
author <- httr_web%>%html_nodes(
'p.c-author'
)%>%html_text(trim = T)
candidate_date=
Sys
.
Date
()%>%format(
'%Y年%m月%d日'
)
fun <-
function
(x){
re=
if
(length(x)==
3
){
re=c(x[
1
],candidate_date,x[length(x)])
}
else
{
re= x[-
2
]
}
re=data.frame(發佈者=re[
1
],日期=re[
2
],時間=re[
3
])
return
(re)
}
news_Trump <- data.frame(標題=title ,
author%>%str_split(
'\\s'
)%>%lapply(fun)%>%list.stack())
library(rvest)
library(stringr)
library(rlist)
install.packages("rlist")
library(rvest)
library(stringr)
library(rlist)
url <-
'http://news.baidu.com/ns?cl=2&rn=20&tn=news&word=%E7%89%B9%E6%9C%97%E6%99%AE&ie=utf-8'
httr_web <- read_html(url,encoding =
'utf-8'
)
title <- httr_web%>%html_nodes(
'h3>a'
)%>%html_text(trim = T)
author <- httr_web%>%html_nodes(
'p.c-author'
)%>%html_text(trim = T)
candidate_date=
Sys
.
title
title
title
title
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo")
title=html_nodes(title,"#ItemContainer :nth-child(1)")
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo")
title=html_nodes(title,"#ItemContainer :nth-child(1)")
title=html_text(title)   # 只篩選出文字
title=iconv(title,"UTF-8")  #若是文字出現亂碼，將格式改成可以辨識的形式
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo")
title=html_nodes(title,".value , .prod_name a")
View(title)
title=html_text(title)   # 只篩選出文字
title=iconv(title,"UTF-8")  #若是文字出現亂碼，將格式改成可以辨識的形式
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo")
title=html_nodes(title,".value")
title=html_text(title)   # 只篩選出文字
title=iconv(title,"UTF-8")  #若是文字出現亂碼，將格式改成可以辨識的形式
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo")
title=html_nodes(title,".value")
View(title)
View(title)
View(title)
View(title)
View(title)
View(title)
title
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo")
title=html_nodes(title,".value")
title
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo")
title=html_nodes(title,".value")
title=html_text(title)   # 只篩選出文字
title
title=read_html("https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=lenovo&page=1&sort=rnk/dc")
title=html_nodes(title,".value")
title=html_text(title)   # 只篩選出文字
title
library(rvest)
doc <- read_html("http://news.pts.org.tw/list/1") # 把網頁先存在一個變數裡，不用每次都連線造訪
doc <- read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo") # 把網頁先存在一個變數裡，不用每次都連線造訪
doc %>% html_nodes(".list-news-title a") # 取得 css 路徑下的所有節點
doc %>% html_nodes(".list-news-title a") %>% html_attr("href") # 取得 href 屬性
doc %>% html_nodes(".list-news-title a") %>% html_text() # 取得文字
library(rvest)
doc <- read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo") # 把網頁先存在一個變數裡，不用每次都連線造訪
doc %>% html_nodes(".value") # 取得 css 路徑下的所有節點
doc %>% html_nodes(".value") %>% html_attr("href") # 取得 href 屬性
doc %>% html_nodes(".value") %>% html_text() # 取得文字
doc %>% html_nodes(".value") %>% html_name() # 取得文字
library(rvest)
doc <- read_html("https://ecshweb.pchome.com.tw/search/v3.3/?q=lenovo") # 把網頁先存在一個變數裡，不用每次都連線造訪
doc %>% html_nodes(".value") # 取得 css 路徑下的所有節點
doc %>% html_nodes(".value") %>% html_attr("href") # 取得 href 屬性
doc %>% html_nodes(".value") %>% html_name() # 取得文字
library(viridis)
install.packages(viridis)
title=read_html("http://sports.ltn.com.tw/")
title=html_nodes(title,".content .list_title")
title=html_text(title)   # 只篩選出文字
title
title=read_html("https://zh.wikipedia.org/wiki/%E5%88%80%E5%8A%8D%E7%A5%9E%E5%9F%9F#%E5%8B%95%E7%95%AB%E5%8A%87%E5%A0%B4%E7%89%88")
title=html_nodes(title,"td , th")
title=html_text(title)   # 只篩選出文字
title
title=read_html("https://zh.wikipedia.org/wiki/%E5%88%80%E5%8A%8D%E7%A5%9E%E5%9F%9F#%E5%8B%95%E7%95%AB%E5%8A%87%E5%A0%B4%E7%89%88")
title=html_nodes(title,".wikitable:nth-child(170) td , th tr , .wikitable:nth-child(170)")
title=html_text(title)   # 只篩選出文字
title
url <- "http://opendata.epa.gov.tw/ws/Data/UV/?format=json"
my.data <- fromJSON(url)
head(my.data)
View(my.data)
url <- "https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=asus&page=1&sort=rnk/dc"
my.data <- fromJSON(url)
View(my.data)
setwd("C:/Users/perot/Desktop/NTU-CSX4001/Week_2")
### Crawler_Example with rvest    #####################################################################
# 參考：https://blog.gtwang.org/r/rvest-web-scraping-with-r/
rm(list = ls())
library(rvest)
# Set url
url <- "https://www.ptt.cc/bbs/NBA/index5720.html"
# Get response
res <- read_html(url)
### Crawler_Example with jsonlite #####################################################################\
rm(list = ls())
library(jsonlite)
url <- "https://www.dcard.tw/_api/posts?popular=true"
res <- fromJSON(url)
View(res)
#設定網址
res=get(url)
url <- "https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=asus&page=1&sort=rnk/dc"
#設定網址
res=get(url)
#設定網址
res = get(url)
url <- "https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=asus&page=1&sort=rnk/dc"
#設定網址
res = get(url)
my.data <- fromJSON(url)
url <- "https://ecshweb.pchome.com.tw/search/v3.3/all/results?q=asus&page=1&sort=rnk/dc"
#設定網址
res = get(url)
View(my.data)
#設定網址
my.data <- fromJSON(url)
View(my.data)
